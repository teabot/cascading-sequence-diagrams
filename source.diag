seqdiag {
  client; FlowConnector; Flow; task; Tap; Scheme; TupleEntryIterator;
  
  client -> FlowConnector [label="connect()"];
    FlowConnector --> Flow [label="<init>"];
      Flow -> Tap [label="flowConfInit()"];
      Flow <- Tap;
    FlowConnector <-- Flow;
  client <- FlowConnector [label="// returns Flow"];  
  
  client -> Flow [label="complete()"];

    Flow -> Tap [label="sourceConfInit()"];
      Tap -> Scheme [label="sourceConfInit()"];
      Tap <- Scheme;
    Flow <- Tap;
    
    Flow -> Tap [label="prepareResourceForRead()", rightnote="new in 2.7,\nI think this\nruns here."];
    Flow <- Tap;
  
    Flow -> task [label="<submit jobs>"];
    
      task -> Tap [label="openForRead()"];
        Tap --> TupleEntryIterator [label="<init>"];
          TupleEntryIterator -> Scheme [label="sourcePrepare()"];
          TupleEntryIterator <- Scheme;
        Tap <-- TupleEntryIterator; 
      task <- Tap [label="// returns TupleEntryIterator"];
  
      task -> TupleEntryIterator [label="hasNext()"];
      task <- TupleEntryIterator [label="// true"];
      task -> TupleEntryIterator [label="next()"];
        TupleEntryIterator -> Scheme [label="source()"];
        TupleEntryIterator <- Scheme [label="// returns a record"];
      task <- TupleEntryIterator;
      task -> TupleEntryIterator [label="hasNext()"];
      task <- TupleEntryIterator [label="// false"];
  
      task -> TupleEntryIterator [label="close()"];
        TupleEntryIterator -> Scheme [label="sourceCleanUp()"];
        TupleEntryIterator <- Scheme;  
      task <- TupleEntryIterator;
  
    Flow <- task [label="<all jobs complete>"];
  
  client <- Flow;
}