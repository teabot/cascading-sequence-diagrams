seqdiag {
  "<client>"; FlowConnector; Flow; "<platform>"; Tap; Scheme; TupleEntryIterator;
  
  "<client>" -> FlowConnector [label="connect()"];
    FlowConnector --> Flow [label="<init>"];

      Flow -> Tap [label="flowConfInit()"];
      Flow <- Tap;

      Flow -> Tap [label="retrieveSourceFields()"];
        Tap -> Scheme [label="retrieveSourceFields()"];
        Tap <- Scheme;
      Flow <- Tap;

      Flow -> Tap [label="presentSourceFields()"];
        Tap -> Scheme [label="presentSourceFields()"];
        Tap <- Scheme;
      Flow <- Tap;
      
    FlowConnector <-- Flow;
  "<client>" <- FlowConnector [label="// returns Flow"];  
  
  "<client>" -> Flow [label="complete()"];

    Flow -> Tap [label="sourceConfInit()"];
      Tap -> Scheme [label="sourceConfInit()"];
      Tap <- Scheme;
    Flow <- Tap;
    
    Flow -> Tap [label="prepareResourceForRead()", rightnote="new in 2.7.0."];
    Flow <- Tap;
  
    Flow -> "<platform>" [diagonal, label="<submit tasks>"];
    
    === Begin platform side processing ===
    
      "<platform>" -> Tap [label="openForRead()"];
        Tap --> TupleEntryIterator [label="<init>"];
          TupleEntryIterator -> Scheme [label="sourcePrepare()"];
          TupleEntryIterator <- Scheme;
        Tap <-- TupleEntryIterator; 
      "<platform>" <- Tap [label="// returns TupleEntryIterator"];
  
      "<platform>" -> TupleEntryIterator [label="hasNext()", rightnote="Called many times."];
      "<platform>" <- TupleEntryIterator [label="// true"];
      "<platform>" -> TupleEntryIterator [label="next()", rightnote="Called many times."];
        TupleEntryIterator -> Scheme [label="source()"];
        TupleEntryIterator <- Scheme [label="// true"];
      "<platform>" <- TupleEntryIterator [label="// returns a TupleEntry"];
      "<platform>" -> TupleEntryIterator [label="hasNext()"];
      "<platform>" <- TupleEntryIterator [label="// false"];
  
      "<platform>" -> TupleEntryIterator [label="close()"];
        TupleEntryIterator -> Scheme [label="sourceCleanUp()"];
        TupleEntryIterator <- Scheme;  
      "<platform>" <- TupleEntryIterator;
  
    Flow <- "<platform>" [diagonal, label="<all tasks complete>"];
  
    === End platform side processing ===
    
  "<client>" <- Flow;
}